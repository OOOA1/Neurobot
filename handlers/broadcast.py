# handlers/broadcast.py
# -*- coding: utf-8 -*-
from __future__ import annotations

import asyncio
import logging
from typing import Any, Iterable

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError, TelegramAPIError
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message

from config import settings
from db import connect, _prepare

router = Router()
log = logging.getLogger(__name__)


# ---------- –ê–¥–º–∏–Ω-–ø—Ä–æ–≤–µ—Ä–∫–∞ ----------
def _is_admin(user_id: int) -> bool:
    try:
        return user_id in settings.admin_ids()
    except Exception:
        raw = (getattr(settings, "ADMIN_USER_IDS", "") or "").replace(" ", "")
        return str(user_id) in {x for x in raw.split(",") if x}


# ---------- FSM ----------
class BroadcastStates(StatesGroup):
    waiting_content = State()


# ---------- –ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ–º–∞–Ω–¥—ã ----------
@router.message(Command("broadcast"))
async def start_broadcast_cmd(msg: Message, state: FSMContext) -> None:
    if not _is_admin(msg.from_user.id):
        # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ ¬´–Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞¬ª –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∞
        return
    await state.set_state(BroadcastStates.waiting_content)
    await msg.answer(
        "üì£ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é. "
        "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞."
    )


# ---------- –ó–∞–ø—É—Å–∫ –∏–∑ –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫–∏ ----------
@router.callback_query(F.data == "admin:broadcast")
async def start_broadcast_cb(cb: CallbackQuery, state: FSMContext) -> None:
    if not _is_admin(cb.from_user.id):
        await cb.answer()
        return
    await cb.answer()
    await state.set_state(BroadcastStates.waiting_content)
    if cb.message:
        await cb.message.answer(
            "üì£ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
        )


# ---------- –ü—Ä–∏—ë–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ ----------
@router.message(BroadcastStates.waiting_content)
async def broadcast_collect_and_send(msg: Message, state: FSMContext) -> None:
    if not _is_admin(msg.from_user.id):
        await state.clear()
        return

    # 1) –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º ¬´–∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏¬ª –∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    content: dict[str, Any] | None = None

    if msg.text:
        content = {"type": "text", "text": msg.text}
    elif msg.photo:
        file_id = msg.photo[-1].file_id
        caption = (msg.caption or "").strip() or None
        content = {"type": "photo", "file_id": file_id, "caption": caption}
    elif msg.document and (msg.document.mime_type or "").startswith("image/"):
        file_id = msg.document.file_id
        caption = (msg.caption or "").strip() or None
        content = {"type": "photo", "file_id": file_id, "caption": caption}

    if not content:
        await msg.answer("–ù—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –ª–∏–±–æ —Ç–µ–∫—Å—Ç, –ª–∏–±–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ) —Å –ø–æ–¥–ø–∏—Å—å—é.")
        return

    await state.clear()

    # 2) –ü–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
    admin_id = msg.from_user.id
    user_ids = await _list_recipients(exclude_ids={admin_id})

    if not user_ids:
        await msg.answer("–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    # 3) –°–æ–æ–±—â–∏–º –∞–¥–º–∏–Ω—É –∏ –∑–∞–ø—É—Å—Ç–∏–º —Ä–∞—Å—Å—ã–ª–∫—É
    status = await msg.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞‚Ä¶\n–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(user_ids)}")
    sent = 0
    failed = 0

    # –ù–µ–±–æ–ª—å—à–æ–π —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ –ª–∏–º–∏—Ç—ã
    per_message_delay = 0.05

    for idx, uid in enumerate(user_ids, start=1):
        try:
            if content["type"] == "text":
                await msg.bot.send_message(uid, content["text"])
            else:
                await msg.bot.send_photo(uid, content["file_id"], caption=content.get("caption"))
            sent += 1
        except (TelegramForbiddenError, TelegramBadRequest) as exc:
            # –Æ–∑–µ—Ä —É–¥–∞–ª–∏–ª / –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π file_id ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            failed += 1
            log.warning("Broadcast send failed to %s: %s", uid, exc)
        except TelegramAPIError as exc:
            failed += 1
            log.exception("Broadcast API error to %s: %s", uid, exc)
        except Exception as exc:
            failed += 1
            log.exception("Broadcast unexpected error to %s: %s", uid, exc)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞–∑ –≤ N —Å–æ–æ–±—â–µ–Ω–∏–π
        if idx % 50 == 0:
            try:
                await status.edit_text(
                    f"–†–∞—Å—Å—ã–ª–∫–∞ –∏–¥—ë—Ç‚Ä¶ {idx}/{len(user_ids)}\n"
                    f"–£—Å–ø–µ—à–Ω–æ: {sent} | –û—à–∏–±–æ–∫: {failed}"
                )
            except TelegramBadRequest:
                pass

        await asyncio.sleep(per_message_delay)

    # 4) –ò—Ç–æ–≥
    try:
        await status.edit_text(
            "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"–í—Å–µ–≥–æ: {len(user_ids)}\n–£—Å–ø–µ—à–Ω–æ: {sent}\n–û—à–∏–±–æ–∫: {failed}"
        )
    except TelegramBadRequest:
        await msg.answer(
            "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"–í—Å–µ–≥–æ: {len(user_ids)}\n–£—Å–ø–µ—à–Ω–æ: {sent}\n–û—à–∏–±–æ–∫: {failed}"
        )


# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ----------
async def _list_recipients(*, exclude_ids: Iterable[int] = ()) -> list[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ tg_user_id –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    –ò—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ exclude_ids –∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö.
    """
    exclude = set(int(x) for x in exclude_ids or [])
    async with connect() as db:
        await _prepare(db)
        cur = await db.execute(
            """
            SELECT tg_user_id
              FROM users
             WHERE tg_user_id IS NOT NULL
               AND COALESCE(is_banned, 0) = 0
            """
        )
        rows = await cur.fetchall()
        await cur.close()

    ids = []
    for r in rows:
        uid = int(r["tg_user_id"])
        if uid not in exclude:
            ids.append(uid)
    return ids
