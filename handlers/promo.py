# -*- coding: utf-8 -*-
from __future__ import annotations

import re
import secrets
import string
from typing import Iterable
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import settings
from db import (
    _prepare,
    connect,
    ensure_user,
    # TTL-–º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:
    create_token_promo_campaign,
    generate_token_promo_codes,
    list_token_promo_campaigns,
    redeem_token_promo_code_ttl,
)

router = Router()


class PromoStates(StatesGroup):
    waiting_code = State()


DEFAULT_TTL_HOURS = int(getattr(settings, "PROMO_TTL_HOURS", 3) or 3)


def _admin_ids() -> set[int]:
    raw = getattr(settings, "ADMIN_USER_IDS", "") or ""
    if isinstance(raw, (list, tuple, set)):
        return {int(x) for x in raw}
    parts: Iterable[str] = re.split(r"[,\s]+", str(raw).strip()) if raw else []
    return {int(p) for p in parts if p.isdigit()}


def _is_admin(user_id: int) -> bool:
    try:
        return user_id in settings.admin_ids()
    except Exception:
        return user_id in _admin_ids()


def _gen_code(length: int = 8) -> str:
    alphabet = string.ascii_uppercase + string.digits
    return "".join(secrets.choice(alphabet) for _ in range(length))


# ---------------- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–ª–æ—É ----------------

@router.callback_query(F.data == "menu:promo")
async def promo_menu(cb: CallbackQuery, state: FSMContext) -> None:
    await cb.answer()
    if not cb.message:
        return
    await state.set_state(PromoStates.waiting_code)
    await cb.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (–æ–¥–Ω–æ —Å–ª–æ–≤–æ/–Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤).")


@router.message(PromoStates.waiting_code)
async def promo_redeem(msg: Message, state: FSMContext) -> None:
    code = (msg.text or "").strip()
    if not code or len(code) > 64 or " " in code:
        await msg.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ/–Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.")
        return

    async with connect() as db:
        await _prepare(db)
        await ensure_user(db, msg.from_user.id, msg.from_user.username, 0)
        tokens, status = await redeem_token_promo_code_ttl(db, msg.from_user.id, code)

    if status == "ok":
        await state.clear()
        await msg.reply(f"–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞—á–∏—Å–ª–µ–Ω–æ {tokens} —Ç–æ–∫–µ–Ω–æ–≤.")
    elif status == "already_used":
        await msg.reply("–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏.")
    elif status == "expired":
        await msg.reply("–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω.")
    elif status == "inactive":
        await msg.reply("–ü—Ä–æ–º–æ–∫–æ–¥ –æ—Ç–∫–ª—é—á—ë–Ω.")
    else:
        await msg.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


# ---------------- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ) ----------------

@router.message(Command("promo_new"))
async def promo_new(msg: Message) -> None:
    """
    –°–æ–∑–¥–∞—Ç—å –æ–¥–∏–Ω –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π TTL-–∫–æ–¥.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo_new CODE TOKENS [HOURS]
    –ü—Ä–∏–º–µ—Ä: /promo_new SEPTSALE 3 3  -> +3 —Ç–æ–∫–µ–Ω–∞, –∂–∏–≤—ë—Ç 3 —á–∞—Å–∞.
    """
    if not _is_admin(msg.from_user.id):
        return

    args = (msg.text or "").split()
    if len(args) < 3 or not args[2].isdigit():
        await msg.reply(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo_new CODE TOKENS [HOURS]\n"
            "–ü—Ä–∏–º–µ—Ä: /promo_new SEPTSALE 3 3"
        )
        return

    code = args[1].strip().upper()
    tokens = max(1, int(args[2]))
    hours = int(args[3]) if len(args) >= 4 and args[3].isdigit() else DEFAULT_TTL_HOURS

    async with connect() as db:
        await _prepare(db)
        await create_token_promo_campaign(db, code, tokens, hours, msg.from_user.id)

    await msg.reply(f"TTL-–ø—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω: {code} (+{tokens} —Ç–æ–∫.) –Ω–∞ {hours} —á.")


@router.message(Command("promo_gen"))
async def promo_gen(msg: Message) -> None:
    """
    –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—á–∫—É TTL-–∫–æ–¥–æ–≤.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo_gen COUNT TOKENS [HOURS] [PREFIX]
    –ü—Ä–∏–º–µ—Ä: /promo_gen 5 2 3 AUTUMN  -> 5 –∫–æ–¥–æ–≤ AUTUMN-XXXXXX, +2 —Ç–æ–∫–µ–Ω–∞, –∂–∏–≤—É—Ç 3 —á–∞—Å–∞.
    """
    if not _is_admin(msg.from_user.id):
        return

    args = (msg.text or "").split()
    if len(args) < 3 or not args[1].isdigit() or not args[2].isdigit():
        await msg.reply(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo_gen COUNT TOKENS [HOURS] [PREFIX]\n"
            "–ü—Ä–∏–º–µ—Ä: /promo_gen 5 2 3 AUTUMN"
        )
        return

    count = max(1, min(100, int(args[1])))
    tokens = max(1, int(args[2]))
    hours = int(args[3]) if len(args) >= 4 and args[3].isdigit() else DEFAULT_TTL_HOURS
    prefix = args[4].strip() if len(args) >= 5 else None

    async with connect() as db:
        await _prepare(db)
        codes = await generate_token_promo_codes(
            db, count=count, tokens=tokens, ttl_hours=hours, created_by_tg=msg.from_user.id, prefix=prefix
        )

    await msg.reply("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n" + "\n".join(f"{c} (+{tokens})" for c in codes))


@router.message(Command("promo_list"))
async def promo_list(msg: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ TTL-–∫–∞–º–ø–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ —á–∏—Å–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π."""
    if not _is_admin(msg.from_user.id):
        return

    async with connect() as db:
        await _prepare(db)
        rows = await list_token_promo_campaigns(db, limit=30)

    if not rows:
        await msg.reply("–ü—Ä–æ–º–æ–∫–∞–º–ø–∞–Ω–∏–π –Ω–µ—Ç.")
        return

    def fmt_ts(ts: int) -> str:
        try:
            return datetime.fromtimestamp(int(ts)).strftime("%d.%m %H:%M")
        except Exception:
            return str(ts)

    lines = []
    now_ts = int(datetime.now().timestamp())
    for r in rows:
        code = r.get("code")
        t = r.get("tokens")
        exp = int(r.get("expires_at") or 0)
        active = bool(r.get("is_active"))
        used = int(r.get("redemptions") or 0)
        status = "–∞–∫—Ç–∏–≤–µ–Ω" if active and exp > now_ts else ("–ø—Ä–æ—Å—Ä–æ—á–µ–Ω" if exp <= now_ts else "off")
        lines.append(f"{code} ‚Äî +{t} —Ç–æ–∫. ‚Äî –¥–æ {fmt_ts(exp)} ‚Äî {status} ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {used}")

    await msg.reply("\n".join(lines))


# ---------------- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (/admin + –∫–Ω–æ–ø–∫–∏) ----------------

@router.message(Command("admin"))
async def admin_panel(msg: Message) -> None:
    if not _is_admin(msg.from_user.id):
        return
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="‚ûï –û–¥–∏–Ω –∫–æ–¥", callback_data="admin:promo_new_help"),
        InlineKeyboardButton(text="üì¶ –ü–∞—á–∫–∞ –∫–æ–¥–æ–≤", callback_data="admin:promo_gen_help"),
    )
    kb.row(InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π", callback_data="admin:promo_list"))
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–≤–µ–¥—ë—Ç –≤ handlers/broadcast.py)
    kb.row(InlineKeyboardButton(text="üì£ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin:broadcast"))
    await msg.answer(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n"
        "‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥—ã (TTL, –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ) ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–µ.\n"
        "‚Ä¢ ¬´üì£ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É¬ª ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞/—Ñ–æ—Ç–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n",
        reply_markup=kb.as_markup()
    )


@router.callback_query(F.data == "admin:promo_new_help")
async def admin_promo_new_help(cb: CallbackQuery) -> None:
    if not _is_admin(cb.from_user.id):
        await cb.answer()
        return
    await cb.message.answer(
        "–°–æ–∑–¥–∞—Ç—å –æ–¥–∏–Ω –∫–æ–¥:\n"
        "`/promo_new CODE TOKENS [HOURS]`\n\n"
        "–ü—Ä–∏–º–µ—Ä: `/promo_new FALL2025 3 3` ‚Äî +3 —Ç–æ–∫–µ–Ω–∞, —Å—Ä–æ–∫ 3 —á–∞—Å–∞.",
        parse_mode="Markdown"
    )
    await cb.answer()


@router.callback_query(F.data == "admin:promo_gen_help")
async def admin_promo_gen_help(cb: CallbackQuery) -> None:
    if not _is_admin(cb.from_user.id):
        await cb.answer()
        return
    await cb.message.answer(
        "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—á–∫—É –∫–æ–¥–æ–≤:\n"
        "`/promo_gen COUNT TOKENS [HOURS] [PREFIX]`\n\n"
        "–ü—Ä–∏–º–µ—Ä: `/promo_gen 5 2 3 AUTUMN` ‚Äî 5 –∫–æ–¥–æ–≤, –∫–∞–∂–¥—ã–π +2 —Ç–æ–∫–µ–Ω–∞, —Å—Ä–æ–∫ 3 —á–∞—Å–∞.",
        parse_mode="Markdown"
    )
    await cb.answer()


@router.callback_query(F.data == "admin:promo_list")
async def admin_promo_list(cb: CallbackQuery) -> None:
    if not _is_admin(cb.from_user.id):
        await cb.answer()
        return
    async with connect() as db:
        await _prepare(db)
        rows = await list_token_promo_campaigns(db, limit=30)

    if not rows:
        await cb.message.answer("–ü—Ä–æ–º–æ–∫–∞–º–ø–∞–Ω–∏–π –Ω–µ—Ç.")
        await cb.answer()
        return

    now_ts = int(datetime.now().timestamp())

    def fmt_ts(ts: int) -> str:
        try:
            return datetime.fromtimestamp(int(ts)).strftime("%d.%m %H:%M")
        except Exception:
            return str(ts)

    lines = []
    for r in rows:
        code = r.get("code"); t = r.get("tokens")
        exp = int(r.get("expires_at") or 0)
        active = bool(r.get("is_active")); used = int(r.get("redemptions") or 0)
        status = "–∞–∫—Ç–∏–≤–µ–Ω" if active and exp > now_ts else ("–ø—Ä–æ—Å—Ä–æ—á–µ–Ω" if exp <= now_ts else "off")
        lines.append(f"{code} ‚Äî +{t} —Ç–æ–∫. ‚Äî –¥–æ {fmt_ts(exp)} ‚Äî {status} ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {used}")
    await cb.message.answer("\n".join(lines))
    await cb.answer()
