# -*- coding: utf-8 -*-
from __future__ import annotations

import logging
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from config import settings
from db import connect, _prepare, ensure_user, get_user_balance, add_user_tokens
from keyboards.balance_kb import balance_kb
from keyboards.main_menu_kb import main_menu_kb
from texts import BALANCE_VIEW

router = Router()
log = logging.getLogger(__name__)

# –¢–∞—Ä–∏—Ñ—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ ‚Äî –¥–ª—è DEV –º–æ–∂–µ–º —Å—Ä–∞–∑—É –Ω–∞—á–∏—Å–ª—è—Ç—å –ø—Ä–∏ –∫–ª–∏–∫–µ (–ø–µ—Å–æ—á–Ω–∏—Ü–∞)
PLAN_TOKENS = {
    "trial": 2,
    "base": 12,
    "neuro": 30,
    "vip": 120,
    "top": 600,
}


def _is_admin(user_id: int) -> bool:
    try:
        return user_id in settings.admin_ids()
    except Exception:
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ Settings ‚Äî —á–∏—Ç–∞–µ–º –∏–∑ —Å—Ç—Ä–æ–∫–∏ env
        raw = (getattr(settings, "ADMIN_USER_IDS", "") or "").replace(" ", "")
        return str(user_id) in {x for x in raw.split(",") if x}


async def _send_balance_view(message_or_cb, tg_user_id: int, username: str | None):
    async with connect() as db:
        await _prepare(db)
        await ensure_user(db, tg_user_id, username, settings.FREE_TOKENS_ON_JOIN)
        balance_int = await get_user_balance(db, tg_user_id)

    balance_text = "‚àû" if _is_admin(tg_user_id) else str(balance_int)
    text = BALANCE_VIEW.format(balance=balance_text)
    kb = balance_kb()

    if isinstance(message_or_cb, Message):
        await message_or_cb.answer(text, reply_markup=kb)
    else:
        await message_or_cb.message.edit_text(text, reply_markup=kb)


@router.message(F.text.casefold() == "–±–∞–ª–∞–Ω—Å")
async def balance_entry(msg: Message, state: FSMContext):
    await _send_balance_view(msg, msg.from_user.id, msg.from_user.username)


@router.callback_query(F.data == "menu:balance")
async def balance_from_menu(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    if not cb.message:
        return
    await _send_balance_view(cb, cb.from_user.id, cb.from_user.username)


@router.callback_query(F.data == "balance:back")
async def balance_back(cb: CallbackQuery, state: FSMContext):
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await cb.answer()


@router.callback_query(F.data.startswith("buy:"))
async def balance_buy(cb: CallbackQuery):
    plan = cb.data.split(":", 1)[1]

    # –ê–¥–º–∏–Ω—É —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω—É–∂–Ω—ã ‚Äî —É –Ω–µ–≥–æ –±–µ–∑–ª–∏–º–∏—Ç
    if _is_admin(cb.from_user.id):
        await cb.answer("–£ –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä). –ü–æ–∫—É–ø–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.", show_alert=True)
        return

    # –í –±–æ—é —Ç—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–ª–∞—Ç—ë–∂ (Invoice/PayAPI). –î–ª—è DEV ‚Äî –Ω–∞—á–∏—Å–ª–∏–º —Å—Ä–∞–∑—É.
    if settings.APP_ENV.lower() == "dev" and plan in PLAN_TOKENS:
        async with connect() as db:
            await _prepare(db)
            await ensure_user(db, cb.from_user.id, cb.from_user.username, settings.FREE_TOKENS_ON_JOIN)
            await add_user_tokens(db, cb.from_user.id, PLAN_TOKENS[plan])
        await cb.answer("–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: —Ç–æ–∫–µ–Ω—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã ‚úÖ", show_alert=True)
        # –û–±–Ω–æ–≤–∏–º —ç–∫—Ä–∞–Ω
        await _send_balance_view(cb, cb.from_user.id, cb.from_user.username)
        return

    await cb.answer("–û–ø–ª–∞—Ç–∞ —ç—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ üí≥", show_alert=True)
