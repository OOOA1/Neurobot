from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from keyboards import video_kb, main_kb, aspect_kb
from models import ModelName, ASPECT_CHOICES, SPEED_CHOICES
from services.moderation import check_text
from db import connect, ensure_user, create_job, set_job_status, get_job, _prepare
from texts import HELP
from config import settings
import logging
import asyncio
import os
import tempfile

from services.providers import luma as luma_api
from services.providers import veo as veo_api

logger = logging.getLogger(__name__)
router = Router()

# –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞—Ö
STATE = {}


@router.message(F.text == "–†–∞–±–æ—Ç–∞ —Å –≤–∏–¥–µ–æ")
async def video_menu(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å: Veo-3 –∏–ª–∏ Luma", reply_markup=video_kb())


@router.message(F.text.in_(["Veo-3", "Luma"]))
async def pick_model(msg: Message):
    STATE[msg.from_user.id] = {"model": ModelName.VEO if msg.text=="Veo-3" else ModelName.LUMA}
    await msg.answer("–ü—Ä–∏—à–ª–∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ", reply_markup=main_kb())


@router.message()
async def flow(msg: Message):
    s = STATE.get(msg.from_user.id)
    if not s or "model" not in s:
        return  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    if "prompt" not in s:
        s["prompt"] = msg.text.strip()
        mod = check_text(s["prompt"])
        if not mod.allow:
            await msg.answer(f"üö´ –ù–µ–ª—å–∑—è: {mod.reason}")
            STATE.pop(msg.from_user.id, None)
            return
        await msg.answer("–í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω", reply_markup=aspect_kb())
        return
    
    if "aspect" not in s and msg.text in ASPECT_CHOICES:
        s["aspect"] = msg.text
        s["speed"] = SPEED_CHOICES[0]  # Iteration A: —Ñ–∏–∫—Å–∏—Ä—É–µ–º Fast

        async with connect() as db:
            await _prepare(db)
            user = await ensure_user(db, msg.from_user.id, msg.from_user.username, 0)
            job_id = await create_job(db, user["id"], s["model"], s["aspect"], s["prompt"])

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        try:
            if s["model"] == ModelName.LUMA:
                logger.info("Submitting job to luma API")
                submit = await luma_api.submit(s["prompt"], s["aspect"], s["speed"])
                provider_job_id = submit["job_id"]
                status_msg = await msg.answer(
                    "‚è≥ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.\n"
                    f"–°—Ç–∞—Ç—É—Å: dreaming\n"
                    f"–ú–æ–¥–µ–ª—å: {s['model']}, Aspect: {s['aspect']}, Speed: {s['speed']}\n"
                    f"–ü—Ä–æ–º–ø—Ç: {s['prompt']}"
                )
                async with connect() as db:
                    await _prepare(db)
                    await set_job_status(db, job_id, "dreaming")
                
                # —Ü–∏–∫–ª –æ–ø—Ä–æ—Å–∞
                result = await luma_api.wait_until_complete(
                    provider_job_id,
                    interval_sec=settings.JOB_POLL_INTERVAL_SEC,
                    timeout_sec=settings.JOB_MAX_WAIT_MIN * 60,
                )
                final = result["final"]
                if final == "completed":
                    video_bytes = await luma_api.download_video(result["video_url"])
                    # –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è send_video
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as f:
                        f.write(video_bytes)
                        tmp_path = f.name
                    await msg.answer_video(
                        video=FSInputFile(tmp_path), 
                        caption="‚úÖ –ì–æ—Ç–æ–≤–æ"
                    )
                    os.unlink(tmp_path)
                    async with connect() as db:
                        await _prepare(db)
                        await set_job_status(db, job_id, "done")
                elif final == "timeout":
                    await msg.answer(
                        "‚ö†Ô∏è Luma –¥–æ–ª–≥–æ –º–æ–ª—á–∏—Ç. –Ø –ø—Ä–æ–¥–æ–ª–∂—É –ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–∑–∂–µ, "
                        "–∞ –ø–æ–∫–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç/–∞—Å–ø–µ–∫—Ç."
                    )
                    async with connect() as db:
                        await _prepare(db)
                        await set_job_status(db, job_id, "failed")
                else:
                    await msg.answer("‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.")
                    async with connect() as db:
                        await _prepare(db)
                        await set_job_status(db, job_id, "failed")

            else:
                # –î–ª—è Veo –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –æ—Ç–ª–∞–¥–∫–µ Luma
                async with connect() as db:
                    await _prepare(db)
                    await set_job_status(db, job_id, "done")
                await msg.answer("‚úÖ (Veo –¥–µ–º–æ) –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚Äî –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª.")
        except Exception as e:
            logger.exception("Error while processing video generation: %s", e)
            await msg.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.\n–î–µ—Ç–∞–ª–∏: {e}")
            async with connect() as db:
                await _prepare(db)
                await set_job_status(db, job_id, "failed")

        STATE.pop(msg.from_user.id, None)