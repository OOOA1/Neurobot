# -*- coding: utf-8 -*-
from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from config import settings
from db import _prepare, connect, ensure_user, get_user_balance
from db import award_referral_if_eligible  # <-- –≤–∞–∂–Ω–æ
from handlers.video import start_veo_wizard, start_luma_wizard
from keyboards.main_menu_kb import (
    back_to_main_menu_kb,
    main_menu_kb,
    video_menu_kb,
)
from texts import HELP, WELCOME

router = Router()


def _is_not_modified_error(exc: TelegramBadRequest) -> bool:
    return "message is not modified" in str(exc).lower()


async def _send_main_menu(msg: Message) -> None:
    async with connect() as db:
        await _prepare(db)
        # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∏)
        await ensure_user(db, msg.from_user.id, msg.from_user.username, settings.FREE_TOKENS_ON_JOIN)
        balance = await get_user_balance(db, msg.from_user.id)
    await msg.answer(WELCOME, reply_markup=main_menu_kb(balance))


async def _edit_main_menu(message: Message) -> None:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–∏–¥–µ–æ) ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
    """
    async with connect() as db:
        await _prepare(db)
        # –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö chat.id == user_id; –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
        await ensure_user(db, message.chat.id, None, settings.FREE_TOKENS_ON_JOIN)
        balance = await get_user_balance(db, message.chat.id)

    try:
        if message.text:
            await message.edit_text(text=WELCOME, reply_markup=main_menu_kb(balance))
        else:
            # –£ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ) —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ.
            await message.answer(text=WELCOME, reply_markup=main_menu_kb(balance))
    except TelegramBadRequest as exc:
        # –ï—Å–ª–∏ not modified ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –∏–Ω–∞—á–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º.
        if not _is_not_modified_error(exc):
            # –í–æ–∑–º–æ–∂–µ–Ω –∫–µ–π—Å: —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–µ –¥–∞—ë—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).
            # –ü–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
            try:
                await message.answer(text=WELCOME, reply_markup=main_menu_kb(balance))
            except TelegramBadRequest as inner_exc:
                if not _is_not_modified_error(inner_exc):
                    raise


async def _clear_markup(message: Message) -> None:
    try:
        await message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest as exc:
        if not _is_not_modified_error(exc):
            raise


async def _edit_with_back(message: Message, *, text: str) -> None:
    try:
        await message.edit_text(text=text, reply_markup=back_to_main_menu_kb())
    except TelegramBadRequest as exc:
        if not _is_not_modified_error(exc):
            raise


async def _edit_video_menu(message: Message) -> None:
    try:
        await message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ",
            reply_markup=video_menu_kb(),
        )
    except TelegramBadRequest as exc:
        if not _is_not_modified_error(exc):
            raise


@router.message(CommandStart())
async def cmd_start(msg: Message) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–∞—ë–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã) –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é.
    –ï—Å–ª–∏ /start –ø—Ä–∏—à—ë–ª —Å payload –≤–∏–¥–∞ ?start=<referrer_tg>, –Ω–∞—á–∏—Å–ª—è–µ–º +2 —Ç–æ–∫–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É —Å—Å—ã–ª–∫–∏.
    –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–º—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º —Å–≤–µ—Ä—Ö –µ–≥–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö.
    """
    async with connect() as db:
        await _prepare(db)
        await ensure_user(
            db, msg.from_user.id, msg.from_user.username, settings.FREE_TOKENS_ON_JOIN
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ payload
        parts = (msg.text or "").split(maxsplit=1)
        if len(parts) == 2:
            payload = (parts[1] or "").strip()
            if payload.isdigit():
                referrer_tg = int(payload)
                if referrer_tg != msg.from_user.id:
                    try:
                        awarded = await award_referral_if_eligible(
                            db,
                            invited_tg=msg.from_user.id,
                            referrer_tg=referrer_tg,
                            tokens=2,
                        )
                    except Exception:
                        awarded = False

                    if awarded:
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ +2 —Ç–æ–∫–µ–Ω–∞—Ö (–æ—à–∏–±–∫—É –≥–ª—É—à–∏–º)
                        try:
                            await msg.bot.send_message(
                                referrer_tg,
                                "üéâ –£ –≤–∞—Å +2 —Ç–æ–∫–µ–Ω–∞ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞!",
                            )
                        except Exception:
                            pass

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–≥–¥–∞ (–≤–Ω–µ –±–ª–æ–∫–∞ try/except –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç payload)
    await _send_main_menu(msg)


@router.message(Command("menu"))
async def cmd_menu(msg: Message) -> None:
    await _send_main_menu(msg)


@router.message(Command("help"))
async def cmd_help(msg: Message) -> None:
    await msg.answer(HELP, reply_markup=back_to_main_menu_kb())


@router.callback_query(F.data == "menu:video")
async def menu_video(cb: CallbackQuery, state: FSMContext) -> None:
    await cb.answer()
    if not cb.message:
        return
    await _clear_markup(cb.message)
    await _edit_video_menu(cb.message)


@router.callback_query(F.data == "menu:video:veo")
async def menu_video_veo(cb: CallbackQuery, state: FSMContext) -> None:
    await cb.answer()
    if not cb.message:
        return
    await start_veo_wizard(cb.message, state)


@router.callback_query(F.data == "menu:video:luma")
async def menu_video_luma(cb: CallbackQuery, state: FSMContext) -> None:
    await cb.answer()
    if not cb.message:
        return
    await start_luma_wizard(cb.message, state)


@router.callback_query(F.data == "menu:help")
async def menu_help(cb: CallbackQuery) -> None:
    await cb.answer()
    if not cb.message:
        return
    await _edit_with_back(cb.message, text=HELP)


@router.callback_query(F.data == "menu:back")
async def menu_back(cb: CallbackQuery) -> None:
    await cb.answer()
    if not cb.message:
        return
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ.
    await _edit_main_menu(cb.message)
